name: Event Store

concurrency:
  group: event-store
  cancel-in-progress: true

on:
  push:
    tags:
      - '*standardnotes/event-store*'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        registry-url: 'https://registry.npmjs.org'
        node-version-file: '.nvmrc'
    - run: yarn build
    - run: yarn lint:event-store
    - run: yarn test:event-store

  publish-aws-ecr:
    needs: test

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build locally
      run: yarn build
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: event-store
        IMAGE_TAG: ${{ github.sha }}
      run: |
        yarn docker build @standardnotes/event-store -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  publish-docker-hub:
    needs: test

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build locally
      run: yarn build
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build, tag, and push image to Docker Hub
      run: |
        yarn docker build @standardnotes/event-store -t standardnotes/event-store:${{ github.sha }}
        docker push standardnotes/event-store:${{ github.sha }}
        docker tag standardnotes/event-store:${{ github.sha }} standardnotes/event-store:latest
        docker push standardnotes/event-store:latest

  deploy-worker:
    needs: publish-aws-ecr

    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition event-store-prod --query taskDefinition > task-definition.json
    - name: Fill in the new version in the Amazon ECS task definition
      run: |
        jq '(.containerDefinitions[] | select(.name=="event-store-prod") | .environment[] | select(.name=="VERSION")).value = "${{ github.sha }}"' task-definition.json > tmp.json && mv tmp.json task-definition.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-prod
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: event-store-prod
        image: ${{ secrets.AWS_ECR_REGISTRY }}/event-store:${{ github.sha }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-prod.outputs.task-definition }}
        service: event-store-prod
        cluster: prod
        wait-for-service-stability: true

  newrelic:
    needs: [ deploy-worker ]

    runs-on: ubuntu-latest

    steps:
      - name: Create New Relic deployment marker for Worker
        uses: newrelic/deployment-marker-action@v1
        with:
          accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
          apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
          applicationId: ${{ secrets.NEW_RELIC_APPLICATION_ID_EVENT_STORE_PROD }}
          revision: "${{ github.sha }}"
          description: "Automated Deployment via Github Actions"
          user: "${{ github.actor }}"
